#+Title: Embedded C++ with STM32 microcontrollers
# +Author: Prasad Ghole
#+Email: prasad.ghole@ltts.com
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/ 
#+REVEAL_THEME: night
#+OPTIONS: toc:nil num:nil timestamp:nil 

* Setup
* Why command line
In the world of feature rich IDE many things are implicitly hidden from user. In order to understand details of firmware building 
we will use command line tools initially. Once we understand lower level details we will move to IDE based development.
Command line tools are mostly tool/IDE agnostic hence moving from one to other toolchain becomeds much easier. 
Command line tools also helps in build automation.

* Installing cross compiler
1. Go to the https://developer.arm.com 
2. Click on Tools and software >> Open source Software >> GNU toolchain
3. Downlaod ARM GNU embedded toolchain as per your host platform (only 32 bit toolchains are available now)
https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads

* Verify installation
  
* STM32F103 board
** Evaluation firmware
https://my.st.com/content/my_st_com/en/products/embedded-software/mcu-mpu-embedded-software/stm32-embedded-software/stm32cube-mcu-mpu-packages/stm32cubef4.license=1562567706435.product=STM32CubeF4.version=1.24.0.html
https://my.st.com/content/my_st_com/en/products/embedded-software/mcu-mpu-embedded-software/stm32-embedded-software/stm32cube-mcu-mpu-packages/stm32cubef7.html#resource

* stlink 
** WARNING
Please make sure not to connect both external 5 volts power supply and USB power supply at same time.
** ST link usb drive
Download usb driver from 
https://my.st.com/content/my_st_com/en/products/development-tools/software-development-tools/stm32-software-development-tools/stm32-utilities/stsw-link009.license=1564137466456.product=STSW-LINK009.version=2.0.1.html
 Run stlink_winusb_install batch file to install driver.
** ST link utilities
Download st link utility from 
https://my.st.com/content/my_st_com/en/products/development-tools/software-development-tools/stm32-software-development-tools/stm32-programmers/stsw-link004.html

* Debug Server 
** OpenOCD
** GDB Server
* libopencm3 or STM HAL


* STM32Cube Project
1. Create STM32Cube project
2. Select board 
3. Give project Name
4. Select target C++
* Hello World
** Write Program
** Compliling
** Linking
** Loading firmware to target
*** Converting to binary
ELf file consists of additional header informatio. but to load binary on target flash we need to strip down this 
additional information. 
#+BEGIN_SRC shell

arm-none-eabi-objcopy -I elf -O binary firmware.elf firmware.bin
 
#+END_SRC
*** Programming Controller

#+BEGIN_SRC bash
st-link_cli -C SWD -P firmware.bin 0x8000000 -V "after_programming"

#+END_SRC
Linker scripts describes the
** Debug
*** Start GDB server
*** load elf
*** Debug
* C++ 14 
C++ standard evolved more rapidly after release of 2011
* Use namespece
Explain how we can use namespace to simplify naming of common static functions.
#+SRC_BEGIN C++

#+SRC_END

* static asserts 
This will help in compile time catching of errors.
* Mixing C and C++  libraries 
* Referances
** Gnu C 
*** Predefined macros
https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html
** Keil library
*** run time library support 
http://www.keil.com/support/man/docs/armlib/armlib_chr1358938908603.htm

C++ libraries need C libraries for target specific support.
